using System.Numerics;

namespace ProjectEuler.Problems;

public class Problem_0057 : Problem
{
	public int N = 1000;

	/// <returns>
	/// The number of fractions whose numerators have more digits than their denominators when 
	/// considering a sequence of N fractions generated by expanding the square root of 2.
	/// </returns>
	public override object Solve()
	{
		return ExpandSquareRootOf2()
			.Take(N)
			.Count(HasLongerNumerator);
	}

	public static IEnumerable<Fraction<BigInteger>> ExpandSquareRootOf2()
	{
		// 1 + 1/2 ... d = 2
		// 1 + 1/(2 + 1/2) ... d = 2 + 1/d
		// 1 + 1/(2 + 1/(2 + 1/2)) ... d = 2 + 1/d
		var d = new Fraction<BigInteger>(2);
		while (true)
		{
			yield return 1 + 1 / d;
			d = 2 + 1 / d;
		}
	}

	/// <returns>True if the fraction's numerator has more digits than its denominator; otherwise, false.</returns>
	private static bool HasLongerNumerator(Fraction<BigInteger> f)
	{
		var a = Utils.ToDigits(f.Num).Count;
		var b = Utils.ToDigits(f.Den).Count;
		return a > b;
	}
}